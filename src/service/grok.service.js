import OpenAI from "openai";
import dotenv from "dotenv";
dotenv.config();

export const openai = new OpenAI({
  apiKey: process.env.GROQ_API_KEY,
  baseURL: "https://api.groq.com/openai/v1",
});

class GrokService {
  constructor() {
    this.openai = openai;
  }

  async analyzeResume(resume, jobDescription) {
    const prompt = `
    You are an expert resume analyzer and a professional HTML/CSS UI designer.
    
    üéØ OBJECTIVE:
    - Analyze the given resume against the provided job description.
    - Output a fully self-contained, professionally styled HTML5 report.
    - Do NOT fabricate information ‚Äî keep content strictly derived from resume and job description.
    
    üìÑ OUTPUT FORMAT:
    - Return a standalone, valid HTML5 document.
    - Must include: <!DOCTYPE html>, <html>, <head>, <style>, <body>.
    - DO NOT return any extra text such as ‚ÄúHere is the resume‚Äù, ‚ÄúBelow is the HTML‚Äù, or any markdown syntax like \`\`\`.
    - Output must begin directly with <!DOCTYPE html> and end with </html> ‚Äî no explanations before or after.
    
    üé® GLOBAL DESIGN RULES:
    - Font: "Segoe UI", Helvetica, Arial, sans-serif
    - Background: #f9f9f9
    - Main container:
      - max-width: 1000px
      - margin: 40px auto
      - padding: 30px
      - background: #ffffff
      - box-shadow: 0 0 10px rgba(0, 0, 0, 0.1)
    
    üìê LAYOUT & STRUCTURE:
    - Use single-column layout
    - Stack all sections vertically
    - Wrap each section in a <section> tag with:
      - margin-bottom: 2rem
      - padding: 0.5rem
    
    üìã SECTION HEADINGS:
    - Each section heading must be an <h3> with a üìã icon (or button) aligned to the right
    - When the üìã icon is clicked, it must copy that section‚Äôs content to the clipboard
    - Section heading style:
      - font-size: 1.2rem
      - font-weight: bold
      - text-transform: uppercase
      - color: #333
      - display: flex
      - justify-content: space-between
      - align-items: center
      - border-bottom: 1px solid #ccc
      - padding-bottom: 6px
      - margin-bottom: 0.8rem
    
    üì¶ SECTIONS TO INCLUDE:
    
    1Ô∏è‚É£ MATCH SCORE
    - Show a score (0‚Äì100) based on how well the resume matches the job description
    - In the next line, provide a brief explanation of the score and why it reduced or increased
    - Style: font-size: 1.1rem; color: #000
    
    2Ô∏è‚É£ MISSING SKILLS
    - List skills/keywords present in job description but missing from resume
    - In then next line, provide a brief explanation of why these skills are important for the job or viceversa
    - Use comma-separated format
    - Style: font-size: 1.1rem; color: #000

    3Ô∏è‚É£ SUGGESTIONS TO IMPROVE
    - Provide actionable, concise suggestions to improve the resume if it does not match the job description well
    - And also include suggestions to improve the resume if it matches the job description well
    - Style: font-size: 1.1rem; color: #000
    
    üìã COPY FUNCTIONALITY REQUIREMENT:
    - Include working JavaScript at the bottom of the HTML that enables the üìã icon to copy the inner text of its parent section to the clipboard.
    - Use a <script> tag within <body> to define this behavior.
    
    üì± RESPONSIVE BEHAVIOR:
    - Layout must remain readable on mobile screens
    - Stack elements vertically for small widths
    
    üö´ STRICT RULES (MANDATORY):
    - No external stylesheets or frameworks
    - No markdown or backtick blocks
    - Do NOT wrap or prefix with "Here is", "Below is", etc.
    - Do NOT generate any content outside the <html> tag
    - Do NOT include explanations, metadata, or comments
    - Maintain consistent layout, spacing, padding, and font size
    - Output must always follow the same structure ‚Äî no variation between runs
    
    ‚ö†Ô∏è At the bottom of the page, include this disclaimer in small, gray text:
    "This resume analysis was generated by AI and may contain inaccuracies. Please verify before use."
    
    ---
    Resume:
    """${resume}"""
    
    ---
    Job Description:
    """${jobDescription}"""
    `;




    const response = await this.openai.chat.completions.create({
      model: "llama3-70b-8192",
      messages: [{ role: "user", content: prompt }],
    });

    return response.choices[0].message.content;
  }


  async rewriteResume(resume, jobDescription) {
    const prompt = `
    You are a professional resume writer and expert HTML/CSS designer.
    
    üéØ Objective:
    - Rewrite the given resume content to align **perfectly** with the job description.
    - Keep it professional, concise, and **truthful** ‚Äî do not fabricate any experience or education.
    
    üìÑ Output Format:
    - Return a **standalone HTML5 page** with complete structure: <html>, <head>, <style>, <body>
    - Include all CSS inside a <style> tag ‚Äî do NOT use external stylesheets or frameworks
    - Do not include explanations, markdown, or comments ‚Äî only HTML content
    
    üé® Global Design Rules:
    - Font-family: Segoe UI, Helvetica, Arial, sans-serif
    - Background: #f9f9f9
    - Main container:
      - max-width: 1000px
      - margin: 40px auto
      - padding: 30px
      - background: #ffffff
      - box-shadow: 0 0 10px rgba(0, 0, 0, 0.1)
    
    üìê Layout:
    - Use one column layout:
    - All sections should be stacked vertically
    - Use <section> for each major part of the resume
    - Each section should have consistent padding of 0.5rem and margin 0.5rem
    - For each section heading use h3 with a üìã icon to copy content
      -  Section Header Style (applies to all headings like Skills, Summary, etc.):
        - Style:
        - font-size: 1.2rem
        - font-family: "Segoe UI", Helvetica, Arial, sans-serif
        - font-weight: bold
        - text-transform: uppercase
        - color: #333
        - margin-bottom: .8rem
        - padding-bottom: 6px
        - border-bottom: 1px solid #ccc
        - display: flex
        - justify-content: space-between
        - align-items: center
        - border-bottom: 1px solid #ddd

    - If there is a gap horizontally, align horizontally or else vertically
    
    üß∑
    
    üìã Copy to Clipboard:
    - Include a üìã icon (or similar) to the right of each <h2>
    - When clicked, it copies the section content below the heading
    - Icon style:
      - font-size: 14px
      - cursor: pointer
      - padding-left: 8px
    
    üì¶ Section-by-Section Requirements:
    
    1Ô∏è‚É£ **Contact Information**
    - Format horizontally separated by commas
    - If missing data, include placeholders:
      - "Your Name", "you@example.com", "+1234567890"
    
    2Ô∏è‚É£ **Skills**
    - Format horizontally by commas
    - If skills are missing:
      - Use keywords from job description
      - If no skills in job description, use common industry skills
      - If no skills in resume, infer from job description
    
    3Ô∏è‚É£ **Professional Summary**
    - 3‚Äì5 sentence overview
    - Style:
      - line-height: 1.6
      - margin-top: 10px
    
    4Ô∏è‚É£ **Experience**
    - For Each Job Give Margin Bottom of 1rem
    - Each job: 
      - Job title, Company 
        - Style: font-size: 1.1rem, font-weight: bold, color: #333, margin-bottom: 0.3rem
      - Duration:
         - Style: font-size: 0.9rem, color: #666, margin-bottom: 0.3rem
      - Description in <ul> or <p> blocks
    - If none available, infer from resume and job description
    
    5Ô∏è‚É£ **Projects** (if available)
    - For Each Project give Margin Bottom of 1rem
    - Each project:
      - Project title, Description
        - Style: font-size: 1.1rem, font-weight: bold, color: #333, margin-bottom: 0.3rem
      - Duration:
        - Style: font-size: 0.9rem, color: #666, margin-bottom: 0.3rem
      - Description in <ul> or <p> blocks
    - Format like Experience
    - Mention technologies used and outcome if known
    
    6Ô∏è‚É£ **Education**
    - For Each Education give Margin Bottom of 1rem
    - Each education:
      - Degree, Institution, Year
        - Style: font-size: 1.1rem, font-weight: bold, color: #333, margin-bottom: 0.3rem
      - Description in <ul> or <p> blocks
    - If no education available, give placeholder for user to fill in  - "Degree, Institution, Year"   

    7. ** Suggesetions for Improvement:**
    - Provide specific, actionable suggestions to improve the resume
  
    üì± Responsive Behavior:
    - Ensure readability on mobile devices
    - Layout should stack columns on smaller screens
    
    üö´ STRICT FORMAT RULES:(Mandatory)
    - All sections must follow the exact format above ‚Äî no variation
    - Do not return different layouts on each run
    - Maintain padding, spacing, and color consistency
    - Do not use global styles that can be overridden externally
    - Include a note as it is generated by AI and not a human And it can make mistakes. 
    - Dont render content outside of the <html> tag
    - Do not include any comments, metadata, or explanations in the output
    - Do NOT include any text, headings, or messages like "Here is your resume", "Below is the HTML", etc.
    - Do NOT use backticks, markdown code blocks, or tags like html.
    - ONLY return valid HTML content inside <html>, <head>, <body>, and <style>.
    - Do NOT wrap or prefix the HTML with any commentary or explanation.
 
    
    ---
    Resume:
    """${resume}"""
    
    ---
    Job Description:
    """${jobDescription}"""
    `;








    const response = await this.openai.chat.completions.create({
      model: "llama3-70b-8192", // ‚úÖ Correct model name for Groq
      messages: [{ role: "user", content: prompt }],
    });

    return response.choices[0].message.content;
  }

  async getQuestionsBasedOnJobDescriptionAndCompany(jobDescription) {
    const prompt = `
    You are Highly experienced and an expert technical recruiter and hiring manager.
    
    üéØ OBJECTIVE:
    - Based on the job description below, generate a list of Top 70 tailored interview questions that a candidate might be asked in a real interview.
    - Questions should focus on: 
        - Required skills and technologies
        - Previously asked questions for similar roles in the same company
        - Previously asked questions for similar roles
        - Questions Based on the skills mentioned in the job description
        - Coding challenges or technical assessments
        - Behavioral and situational questions
        - Key responsibilities
        - Behavioral expectations
        - Company culture (if any is evident)
        - Situational/problem-solving capabilities
        - Include  related / similar questions to the currently asked questions with links to the online resources where the candidate can learn more about the topic.
          
    - Do NOT include generic questions that are not specific to the job description or company.
    
    üìÑ OUTPUT FORMAT:
    - Return a standalone, valid HTML5 document.
    - Must include: <!DOCTYPE html>, <html>, <head>, <style>, <body>.
    - DO NOT return any extra text such as ‚ÄúHere is the resume‚Äù, ‚ÄúBelow is the HTML‚Äù, or any markdown syntax like \`\`\`.
    - Output must begin directly with <!DOCTYPE html> and end with </html> ‚Äî no explanations before or after.
    
    üé® GLOBAL DESIGN RULES:
    - Font: "Segoe UI", Helvetica, Arial, sans-serif
    - Background: #f9f9f9
    - Main container:
      - max-width: 1000px
      - margin: 40px auto
      - padding: 30px
      - background: #ffffff
      - box-shadow: 0 0 10px rgba(0, 0, 0, 0.1)
    
    üìê LAYOUT & STRUCTURE:
    - Use single-column layout
    - Stack all sections vertically
    - Each questions should be wrapped like a collapsible section
    - Use <section> for each question with:
      - margin-bottom: 2rem
      - padding: 0.5rem
      - border: 1px solid #ddd
      - When opened, the question should expand to show the answer or explanation and also related similar questions with links to online resources.
    - Wrap each section in a <section> tag with:
      - margin-bottom: 2rem
      - padding: 0.5rem
    
 
  
    üìã COPY FUNCTIONALITY REQUIREMENT:
    - Include working JavaScript at the bottom of the HTML that enables the üìã icon to copy the inner text of its parent section to the clipboard.
    - Use a <script> tag within <body> to define this behavior.
    
    üì± RESPONSIVE BEHAVIOR:
    - Layout must remain readable on mobile screens
    - Stack elements vertically for small widths
    
    üö´ STRICT RULES (MANDATORY):
    - No external stylesheets or frameworks
    - No markdown or backtick blocks
    - Do NOT wrap or prefix with "Here is", "Below is", etc.
    - Do NOT generate any content outside the <html> tag
    - Do NOT include explanations, metadata, or comments
    - Maintain consistent layout, spacing, padding, and font size
    - Output must always follow the same structure ‚Äî no variation between runs
    
    ‚ö†Ô∏è At the bottom of the page, include this disclaimer in small, gray text:
    "This resume analysis was generated by AI and may contain inaccuracies. Please verify before use."
 
    ---
    Job Description:
    """${jobDescription}"""
    `;




    const response = await this.openai.chat.completions.create({
      model: "llama3-70b-8192",
      messages: [{ role: "user", content: prompt }],
    });

    return response.choices[0].message.content;
  }

  async chat(messages, description, res) {
    try {
      // Set headers for SSE (Server-Sent Events)
      res.setHeader("Content-Type", "text/event-stream");
      res.setHeader("Cache-Control", "no-cache");
      res.setHeader("Connection", "keep-alive");

      // Input validation
      if (!messages || !description) {
        throw new Error("messages and description are required");
      }
      if (!Array.isArray(messages)) {
        throw new Error("messages must be an array");
      }
      if (messages.length === 0) {
        throw new Error("messages array cannot be empty");
      }

      // Build system prompt
      const systemPrompt = `You are an AI assistant specialized in technical recruitment.
  Chat with the user based only on the job description.
  Do not respond to off-topic questions.
  Stay concise and relevant.
  
  ---
  Job Description:
  """${description}"""`;

      const systemMessage = { role: "system", content: systemPrompt };
      const allMessages = [systemMessage, ...messages];

      // OpenAI stream request
      const completion = await this.openai.chat.completions.create(
        {
          model: "llama3-70b-8192", // or "gpt-4", etc.
          messages: allMessages,
          stream: true,
          max_tokens: 1000,
        }
      );

      // Stream response token by token
      for await (const chunk of completion) {
        const content = chunk.choices?.[0]?.delta?.content;
        if (content) {
          res.write(`data: ${content}\n\n`);
        }
      }

      // Mark stream end
      res.write(`data: [DONE]\n\n`);
      res.end();

    } catch (error) {
      console.error("Error in chat method:", error);
      res.status(500).write(`data: [ERROR]: ${error.message}\n\n`);
      res.end();
    }
  }



async getStarterCode({title,problem, language="javascript"}) {
  try {
    const SYSTEM_PROMPT = `
You are an AI coding assistant specializing in generating starter code (skeletons) for coding problems.

You will be given:
1. A problem statement.
2. A target programming language.

Your task:
- Produce minimal, clean, and correct starter code for the given problem in the specified language.
- Include:
  - Correct function or class signature
  - Necessary imports
  - Type annotations (if applicable)
  - Docstrings explaining parameters and return values
  - Input parsing logic if required
  - Any helper method stubs
- DO NOT implement the core logic ‚Äî leave a clear TODO comment.
- Match the style and conventions of the target language.
- Ensure code runs without syntax errors.
- Avoid unnecessary complexity or boilerplate.
- Output only the code block without any additional text or explanations.


Example:

Problem Statement:
"Given two integers, return their sum."

Language:
JavaScript

Output:
/**
 * Returns the sum of two integers.
 * @param {number} a - First integer
 * @param {number} b - Second integer
 * @return {number} Sum of a and b
 */
function addTwoNumbers(a, b) {
    // TODO: Implement this function
}
`;

    const userPrompt = `
                        Problem Title:
                        ${title}
                        Problem Statement:
                        ${problem}
                        Language:
                        ${language}
                       `;

    const response = await this.openai.chat.completions.create({
      model: "llama3-70b-8192",
      messages: [
        { role: "system", content: SYSTEM_PROMPT },
        { role: "user", content: userPrompt }
      ],
      temperature: 0
    });

    return response.choices[0]?.message?.content?.trim() || "";
  } catch (error) {
    console.error("Error generating starter code:", error);
    return "// Error: Unable to generate starter code. Please try again later.";
  }
}

async getSolutionSteps({problem, title}) {
  try {
    const SYSTEM_PROMPT = `
You are an AI assistant that specializes in breaking down programming problems into clear solution steps.

You will be given:
1. A Title if available.
1. A problem statement if Available.

Your task:
- Provide a **clear, concise, and professional** step-by-step plan to solve the problem.
- Avoid writing actual code ‚Äî focus on the **logic and algorithm**.
- If there are multiple possible approaches, suggest the most optimal one.
- Mention important edge cases to consider.
- Steps should be actionable for someone who will implement the code later.
- Dont include any code snippets or implementation details or any unecessary apart from below format.
- Important: Output the result in strict JSON format as follows:

Expected Output Format (JSON):
{
  "steps_to_solve": [
    "Step 1: ...",
    "Step 2: ...",
    "...etc"
  ],
  "edge_cases": [
    "...",
    "..."
  ],
  "time_complexity_estimate": "O(...)",
  "space_complexity_estimate": "O(...)"
}
`;

    const userPrompt = `
Problem Statement:
${problem}
`;

    const response = await this.openai.chat.completions.create({
      model: "llama3-70b-8192",
      messages: [
        { role: "system", content: SYSTEM_PROMPT },
        { role: "user", content: userPrompt }
      ],
      temperature: 0
    });

    return response.choices[0]?.message?.content?.trim() || "";
  } catch (error) {
    console.error("Error generating solution steps:", error);
    return JSON.stringify({
      steps_to_solve: [],
      edge_cases: [],
      time_complexity_estimate: "Unknown",
      space_complexity_estimate: "Unknown"
    });
  }
}




async codeEvaluationByAI(problem, solution) {
  const systemPrompt = `
      You are an AI coding evaluator. 
      Your job is to determine if a submitted code implementation solves the given problem correctly.

      No official test cases will be provided. 

      Always follow these steps:
      1. Read the provided problem statement carefully and extract the requirements.
      2. Search the internet for a similar problem from trusted sources (LeetCode, HackerRank, Codeforces, GeeksforGeeks, AtCoder, InterviewBit, Project Euler).
      3. Retrieve multiple official test cases covering normal, edge, and complex scenarios.
      4. Evaluate the provided code against these test cases.
      5. Important: Output the result in strict JSON format as follows:

      {
        "meets_requirements": "YES" or "NO",
        "reasoning": "Brief professional explanation of the evaluation result.",
        "test_source": "Internet-sourced similar problem: [problem name & URL]",
        "test_cases_used": [
          { "input": "...", "expected_output": "...", "actual_output": "...", "passed": true/false }
        ],
        "issues_found": [
          "List specific logical flaws or missing requirements."
        ]
      }

      If no matching problem is found online, create realistic test cases that align with the requirements.
      Be strict and objective ‚Äî only return YES if all cases pass.
          `;

      const userPrompt = `
    **Problem Statement:**
    ${problem}

    **Submitted Code:**
    ${solution}
    `;

  try {
    const response = await this.openai.chat.completions.create({
      model: "llama3-70b-8192", // Groq model
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userPrompt }
      ],
      temperature: 0
    });

    const content = response.choices[0].message.content;

    // Try to parse JSON result
    try {
      return JSON.parse(content);
    } catch (jsonErr) {
      console.warn("AI returned non-JSON output, returning raw content.");
      return content;
    }

  } catch (err) {
    console.error("AI Evaluation failed:", err);
    throw err;
  }
}

async createEmbeddings(text) {
 try{
 
  const response = await this.openai.embeddings.create({
    model: "llama-text-embed-v2",
    input: text,
  });

  if (!response.data || response.data.length === 0) {
    throw new Error("No embeddings returned from AI");
  }
  return response.data[0].embedding;

 }catch(error){
  console.error("Error creating embeddings:", error);
  throw new Error("Failed to create embeddings");
 }
}



async getQuestionBasedOnText(problem) {
  const systemPrompt = `    You are an assistant that provides LeetCode-style questions.
    If a question is not found in the database, provide it in JSON format only, without any extra text.
    Output exactly one JSON object, do NOT repeat or provide examples.

    Output JSON keys:
    {
      "question": "<the question>",
      "description": "<detailed description>",
      "input_format": "<input format>",
      "output_format": "<output format>",
      "constraints": "<constraints>",
      "sample_input": "<sample input>",
      "sample_output": "<sample output>",
      "difficulty": "<difficulty level>"
    }


    **Important**: Do NOT include any explanation, notes, or text outside the JSON object. `;

      const userPrompt = ` Please check and give the problem like this
    **Problem Statement:**
    ${problem}

    `;

  try {
    const response = await this.openai.chat.completions.create({
      model: "llama3-70b-8192", // Groq model
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userPrompt }
      ],
      temperature: 0
    });

    const content = response.choices[0].message.content;

    // Try to parse JSON result
    try {
      return JSON.parse(content);
    } catch (jsonErr) {
      console.warn("AI returned non-JSON output, returning raw content.");
      return content;
    }

  } catch (err) {
    console.error("AI Evaluation failed:", err);
    throw err;
  }
}

}

export default new GrokService();
